name: Build and Publish DEB Package for AMD64

on:
  push:
    tags:
      - 'v*'  # Запуск при пуше нового тега (например, v3.0.2)

permissions:
  contents: write

env:
  GO_VERSION: "1.22"

jobs:
  build-deb-amd64:
    strategy:
      matrix:
        os: [ubuntu-24.04]  # Specify Ubuntu versions
    runs-on: ${{ matrix.os }}
    steps:
      # 1. Install dependencies
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y devscripts debhelper dh-make dpkg-dev build-essential apt-utils \
                                  brotli libsodium-dev liblzo2-dev libbrotli-dev

      # 2. Install Go manually
      - name: Install Go
        run: |
          curl -LO https://go.dev/dl/go1.22.8.linux-amd64.tar.gz
          tar -C /usr/local -xzf go1.22.8.linux-amd64.tar.gz
          export GOROOT=/usr/local/go
          export GOPATH=$HOME/go
          export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
          echo "GOROOT=/usr/local/go" >> $GITHUB_ENV
          echo "GOPATH=$HOME/go" >> $GITHUB_ENV
          echo "PATH=$GOPATH/bin:$GOROOT/bin:$PATH" >> $GITHUB_ENV

      # 3. Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 4. Fetch Go dependencies
      - name: Get dependencies
        run: |
          go get -v -t -d ./...

      # 5. Set Git safe directories
      - name: Configure Git safe directories
        run: |
          git config --global --add safe.directory /home/runner/work/wal-g/wal-g
          git config --global --add safe.directory /home/runner/work/wal-g/wal-g/submodules/brotli

      # 6. Run "make deps"
      - name: Make deps
        run: make deps

      # 7. Build WAL-G for AMD64
      - name: Build WAL-G
        run: |
          export GOOS=linux
          export GOARCH=amd64
          export CGO_ENABLED=1
          export USE_BROTLI=1
          export USE_LIBSODIUM=1
          export USE_LZO=1

          make pg_build
          mv main/pg/wal-g wal-g-amd64

      # 8. Debug WAL-G binary
      - name: Debug WAL-G binary
        run: |
          ls -lh
          file wal-g-amd64