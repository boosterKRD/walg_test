name: Build and Publish DEB Package for AMD64
on:
  push:
    tags:
      - 'v*'


permissions:
  id-token: write  # REQUIRED for deploy-pages
  contents: read   # Allows checking out the repository
  pages: write     # Allows deploying to GitHub Pages
  actions: read    # Allows downloading artifacts


env:
  GO_VERSION: "1.22"
  USE_BROTLI: 1
  USE_LIBSODIUM: 1
  USE_LZO: 1

jobs:
  release-ubuntu:
    strategy:
      matrix:
        # os: [ ubuntu-20.04, ubuntu-22.04, ubuntu-24.04 ]
        os: [ ubuntu-20.04 ]
        # db: [ pg, mongo, redis]
        db: [ pg]
      max-parallel: 2
      fail-fast: false
    runs-on: ${{ matrix.os }}
    continue-on-error: false
    steps:
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y liblzo2-dev brotli libsodium-dev

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Golang
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Make deps
        run: make deps

      - name: Build WAL-G
        run: make ${{ matrix.db }}_build

      - name: Rename WAL-G binary
        run: mv main/${{ matrix.db }}/wal-g wal-g-${{ matrix.db }}-amd64-${{ matrix.os }}

      - name: Extract version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Create DEB package
        run: |
          mkdir -p wal-g-deb/DEBIAN
          mkdir -p wal-g-deb/usr/bin/
          cp wal-g-${{ matrix.db }}-amd64-${{ matrix.os }} wal-g-deb/usr/bin/wal-g
          chmod 755 wal-g-deb/usr/bin/wal-g
          cat <<EOF > wal-g-deb/DEBIAN/control
          Package: wal-g-${{ matrix.db }}
          Version: ${VERSION}
          Section: utils
          Priority: optional
          Architecture: amd64
          Maintainer: You <you@example.com>
          Description: WAL-G backup tool for ${{ matrix.db }} (Brotli, libsodium, LZO enabled)
          EOF
          dpkg-deb --build wal-g-deb wal-g_${VERSION}-${{ matrix.db }}-amd64-${{ matrix.os }}.deb

      - name: Upload DEB package
        uses: actions/upload-artifact@v4
        with:
          name: wal-g-deb-${{ matrix.db }}-${{ matrix.os }}
          path: wal-g_${{ env.VERSION}}-${{ matrix.db }}-amd64-${{ matrix.os }}.deb


  deploy-to-gh-pages:
    needs: release-ubuntu
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all DEB packages
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          merge-multiple: true

      - name: Debug artifacts
        run: |
          echo "Downloaded artifacts:"
          ls -l ./artifacts

      - name: Set up APT Repository and Deploy
        run: |
          mkdir -p public

          # Перебираем все скачанные .deb файлы
          for deb_file in ./artifacts/*.deb; do
            echo "Processing file: $deb_file"

            # Extract Ubuntu version from filename
            if [[ "$deb_file" =~ ubuntu-([0-9]{2}\.[0-9]{2}) ]]; then
              VERSION="${BASH_REMATCH[1]}"
            else
              echo "Could not determine Ubuntu version for $deb_file"
              exit 1
            fi

            # Extract architecture from filename (assuming -amd64- or -arm64- pattern)
            if [[ "$deb_file" =~ -amd64- ]]; then
              ARCH="amd64"
            elif [[ "$deb_file" =~ -arm64- ]]; then
              ARCH="arm64"
            else
              echo "Could not determine architecture for $deb_file"
              exit 1
            fi
            # Map Ubuntu version to codename
            case "$VERSION" in
              "24.04") CODENAME="noble" ;;
              "22.04") CODENAME="jammy" ;;
              "20.04") CODENAME="focal" ;;
              *) echo "Unsupported Ubuntu version: $VERSION" && exit 1 ;;
            esac

            # Create directory for the package and copy it
            TARGET_DIR="public/dists/$CODENAME/main/binary-$ARCH"
            mkdir -p "$TARGET_DIR"
            cp "$deb_file" "$TARGET_DIR/"

            echo "Placed $deb_file in $TARGET_DIR"            
          done

          # Generate Packages and Release files if packages exist
          for CODENAME in noble jammy focal; do
            for ARCH in amd64 arm64; do
              PACKAGE_PATH="public/dists/$CODENAME/main/binary-$ARCH"
              if [[ -d "$PACKAGE_PATH" && $(ls -A "$PACKAGE_PATH"/*.deb 2>/dev/null) ]]; then
                echo "Generating Packages for $CODENAME ($ARCH)"
                apt-ftparchive packages "$PACKAGE_PATH" > "$PACKAGE_PATH/Packages"
                gzip -kf "$PACKAGE_PATH/Packages"
                apt-ftparchive release "public/dists/$CODENAME" > "public/dists/$CODENAME/Release"
              else
                echo "No packages found for $CODENAME ($ARCH), skipping..."
              fi
            done
          done          

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4