name: Release workflow for tagged versions
on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v0.2.19, v0.2.14a

env:
  GO_VERSION: "1.22"
  USE_BROTLI: 1
  USE_LIBSODIUM: 1
  USE_LZO: 1

jobs:
  release-ubuntu:
    strategy:
      matrix:
        os: [ ubuntu-24.04 ]
        db: [ pg ]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install deps
        run: sudo apt-get install liblzo2-dev brotli libsodium-dev

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go 1.x
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
        id: go

      - name: Get dependencies
        run: |
          go get -v -t -d ./...

      - name: Make deps
        run: make deps

      - name: Build WAL-G
        run: make ${{ matrix.db }}_build

      - name: Rename WAL-G binary
        run: mv main/${{ matrix.db }}/wal-g wal-g-${{ matrix.db }}-${{ matrix.os }}-amd64

      - name: Extract version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Create DEB package
        run: |
          mkdir -p wal-g-deb/DEBIAN
          mkdir -p wal-g-deb/usr/bin/
          cp wal-g-${{ matrix.db }}-${{ matrix.os }}-amd64 wal-g-deb/usr/bin/wal-g
          chmod 755 wal-g-deb/usr/bin/wal-g
          cat <<EOF > wal-g-deb/DEBIAN/control
          Package: wal-g
          Version: ${VERSION}
          Section: utils
          Priority: optional
          Architecture: amd64
          Maintainer: You <you@example.com>
          Description: WAL-G backup tool for PostgreSQL (Brotli, libsodium, LZO enabled)
          EOF
          dpkg-deb --build wal-g-deb wal-g_${VERSION}_amd64.deb

      - name: Debug file location
        run: find . -name "wal-g_*.deb"

      - name: Deploy to GitHub Pages
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

          git clone --depth=1 --branch=gh-pages https://github.com/${{ github.repository }}.git repo-pages
          cd repo-pages
          git pull --rebase

          for CODENAME in focal jammy noble; do
            mkdir -p dists/$CODENAME/main/binary-amd64
            cp ../wal-g_${VERSION}_amd64.deb dists/$CODENAME/main/binary-amd64/
          done

          cat <<CONF > ../aptftparchive.conf
          Dir {
            ArchiveDir "dists";
          }
          APT::FTPArchive::Release {
            Origin "WAL-G Repo";
            Label "WAL-G APT Repository";
            Architectures "amd64 arm64";
            Components "main";
          }
          CONF

          for CODENAME in focal jammy noble; do
            apt-ftparchive -c ../aptftparchive.conf packages dists/$CODENAME/main/binary-amd64 > dists/$CODENAME/main/binary-amd64/Packages
            gzip -kf dists/$CODENAME/main/binary-amd64/Packages
            apt-ftparchive -c ../aptftparchive.conf release dists/$CODENAME > dists/$CODENAME/Release
          done

          git add .
          git commit -m "Add WAL-G package ${VERSION} [amd64]"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git push origin gh-pages