name: Build and Publish DEB Package for AMD64
on:
  push:
    tags:
      - 'v*'


permissions:
  contents: write   # Need for `git push`
  actions: read     # Need fot downloading artifacts


env:
  GO_VERSION: "1.22"
  USE_BROTLI: 1
  USE_LIBSODIUM: 1
  USE_LZO: 1

jobs:
  release-ubuntu:
    strategy:
      matrix:
        os: [ ubuntu-20.04, ubuntu-22.04, ubuntu-24.04 ]
        # os: [ ubuntu-20.04 ]
        db: [ pg, mongo, redis]
        # db: [ pg]
      max-parallel: 2
      fail-fast: false
    runs-on: ${{ matrix.os }}
    continue-on-error: false
    steps:
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y liblzo2-dev brotli libsodium-dev

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Golang
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Make deps
        run: make deps

      - name: Build WAL-G
        run: make ${{ matrix.db }}_build

      - name: Rename WAL-G binary
        run: mv main/${{ matrix.db }}/wal-g wal-g-${{ matrix.db }}-amd64-${{ matrix.os }}

      - name: Extract version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Create DEB package
        run: |
          mkdir -p wal-g-deb/DEBIAN
          mkdir -p wal-g-deb/usr/bin/
          cp wal-g-${{ matrix.db }}-amd64-${{ matrix.os }} wal-g-deb/usr/bin/wal-g
          chmod 755 wal-g-deb/usr/bin/wal-g
          cat <<EOF > wal-g-deb/DEBIAN/control
          Package: wal-g-${{ matrix.db }}
          Version: ${VERSION}
          Section: database
          Priority: extra
          Architecture: any
          Maintainer: mdb <mdb-admin@yandex-team.ru>
          Description: WAL-G backup tool for ${{ matrix.db }} (Brotli, libsodium, LZO enabled)
          EOF
          dpkg-deb --build wal-g-deb wal-g_${VERSION}-${{ matrix.db }}-amd64-${{ matrix.os }}.deb

      - name: Upload DEB package
        uses: actions/upload-artifact@v4
        with:
          name: wal-g-deb-${{ matrix.db }}-${{ matrix.os }}
          path: wal-g_${{ env.VERSION}}-${{ matrix.db }}-amd64-${{ matrix.os }}.deb


  deploy-to-gh-pages:
    needs: release-ubuntu
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout gh-pages branch
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git clone --depth=1 --branch=gh-pages https://github.com/${{ github.repository }}.git repo-pages
          cd repo-pages
          for attempt in {1..5}; do
            git pull --rebase origin gh-pages && break
            echo "Retrying git pull ($attempt/5)..."
            sleep $(shuf -i 1-10 -n 1)
          done

      - name: Download all DEB packages
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          merge-multiple: true

      - name: Debug artifacts
        run: |
          echo "Downloaded artifacts:"
          ls -l ./artifacts

      - name: Copy DEB files to APT repo (without public/)
        run: |
          cd repo-pages

          for deb_file in ../artifacts/*.deb; do
            echo "Processing file: $deb_file"

            if [[ "$deb_file" =~ ubuntu-([0-9]{2}\.[0-9]{2}) ]]; then
              VERSION="${BASH_REMATCH[1]}"
            else
              echo "Could not determine Ubuntu version for $deb_file"
              exit 1
            fi

            if [[ "$deb_file" =~ -amd64- ]]; then
              ARCH="amd64"
            elif [[ "$deb_file" =~ -arm64- ]]; then
              ARCH="arm64"
            else
              echo "Could not determine architecture for $deb_file"
              exit 1
            fi

            case "$VERSION" in
              "24.04") CODENAME="noble" ;;
              "22.04") CODENAME="jammy" ;;
              "20.04") CODENAME="focal" ;;
              *) echo "Unsupported Ubuntu version: $VERSION" && exit 1 ;;
            esac

            # ✅ Создаем папки, если их нет
            mkdir -p dists/$CODENAME/main/binary-arm64
            mkdir -p dists/$CODENAME/main/binary-amd64

            TARGET_DIR="dists/$CODENAME/main/binary-$ARCH"
            cp "$deb_file" "$TARGET_DIR/"

            echo "Placed $deb_file in $TARGET_DIR"
          done

      - name: Generate APT Repository Metadata 
        run: |
          cd repo-pages
          for CODENAME in noble jammy focal; do
            for ARCH in amd64 arm64; do
              PACKAGE_PATH="dists/$CODENAME/main/binary-$ARCH"
              if [[ -d "$PACKAGE_PATH" && $(ls -A "$PACKAGE_PATH"/*.deb 2>/dev/null) ]]; then
                echo "Generating Packages for $CODENAME ($ARCH)"
                apt-ftparchive packages "$PACKAGE_PATH" > "$PACKAGE_PATH/Packages"
                gzip -kf "$PACKAGE_PATH/Packages"
                apt-ftparchive release "dists/$CODENAME" > "dists/$CODENAME/Release"
              else
                echo "No packages found for $CODENAME ($ARCH), skipping..."
              fi
            done
          done

      - name: Sign APT Repository Metadata
        run: |
          cd repo-pages
          export GNUPGHOME=$(mktemp -d)

          # Импортируем GPG-ключ из секретов GitHub
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import

          for CODENAME in noble jammy focal; do
            echo "Signing Release file for $CODENAME..."
            gpg --batch --yes --default-key "WAL-G Repository" -abs -o dists/$CODENAME/Release.gpg dists/$CODENAME/Release
            gpg --batch --yes --default-key "WAL-G Repository" --clearsign -o dists/$CODENAME/InRelease dists/$CODENAME/Release
          done

      - name: Commit and Push Changes to gh-pages
        run: |
          cd repo-pages
          git add .
          git commit -m "Update APT repository with new packages"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          for attempt in {1..5}; do
            git push origin gh-pages && break
            echo "Retrying git push ($attempt/5)..."
            sleep $(shuf -i 1-10 -n 1)
          done
          